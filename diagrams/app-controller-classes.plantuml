@startuml AppControllerClasses

struct User {
    + username: String
    + password_hash: String
}
struct Token {
    + text: String
}

class AccountController {
    + login(username: &str, password: &str) -> Option<(User, Token)>
    + logout(&Token)
    + change_password(&Token, new_pw: &str)
}

AccountController -.-|> BaseController



AccountController -.-> AccountManager

class ThreadController {
    + create_thread(user: &UserRef, req: ThreadCreateRequest)
}


AccountManager -- Token
AccountManager -- User



ThreadController -.-> AccountManager
class PostController {
    + create_post_in(author: &UserRef, thread: ThreadId<usize>, req: PostForm)
}

PostController -.-> AccountManager

class AccountManager {
    + create(User) -> UserId<usize>
    + get(username: String) -> Option<User>
    + delete(UserId<usize>) -> Result<(),()>
    + change_password(which: UserId<usize>, to_what: String)
    + create_token(&User) -> Token
    + validate_token(&Token) -> Option<User>
    + delete_token(&Token)
    + delete_all_tokens(UserId<usize>)
}

struct Thread {
    + name: String
    + author: UserId<usize>
}
struct Post {
    + text: String
    + author: UserId<usize>
}

class ThreadRepo {
    + type Repo::T = Thread
    - conn: DbConnection
}
class PostRepo {
    + type Repo::T = Post
    - conn: DbConnection
}

PostRepo -- Post

interface "Repo<T>" {
    + create(item: T) -> Id<T>
    + get(which: Id<T>) -> Option<T>
    + update(which: Id<T>, new_state: T) -> Result<(),()>
    + delete(which: Id<T>) -> Result<(),()>
}

ThreadRepo -.-|> "Repo<T>"

interface BaseController {
    ~ event_bus: impl EventBusHandle
    + dispatch_request(req: HttpRequest) -> HttpResponse
}

BaseController -o EventBusHandle

PostController -.-|> BaseController
ThreadController -.-|> BaseController

PostController -.-> PostRepo
PostController -.-> ThreadRepo

PostRepo -.-|> "Repo<T>"

ThreadRepo -- Thread

ThreadController -.-> ThreadRepo

interface EventBusHandle {
    + publish(what: impl Event)
    + subscribe(kind: EventKind, on_event: FnMut(Event) -> ()) -> u64
    + unsubscribe(sub_id: u64)
}

class RabbitMqHandle {
    - server_conn: TcpSocket
}

EventBusHandle -.-|> RabbitMqHandle

enum Event {
    ThreadCreated(ThreadCreatedEvent)
    PostCreated(PostCreatedEvent)
}


struct ThreadCreatedEvent {
    + which: Thread
    + when: DateTime
}
struct PostCreatedEvent {
    + which: Post
    + when: DateTime
}


ThreadCreatedEvent -o Thread
PostCreatedEvent -o Post

Event -* ThreadCreatedEvent
Event -* PostCreatedEvent

enum EventKind {
    ThreadCreated
    PostCreated
}

class WebhookController {
    + create_webhook(auth: Token, url: String, event_kind: EventKind)
    + delete_webhook(auth: Token, url: String)
}

WebhookController <-.- Event
WebhookController <-.- EventKind

Event -- EventKind


class WebhookRepo {
    + type Repo::T = Webhook
    - conn: DbConnection
    + get_by_event_type(which: EventType) -> Vec<Webhook>
}


struct Webhook {
    + url: String
    + send_what: EventKind
}

Webhook -- WebhookRepo
Webhook -* EventKind

WebhookRepo -.-|> "Repo<T>"

WebhookRepo <-.- EventKind

WebhookController -.-> WebhookRepo
WebhookController -.-|> BaseController

class WebhookExecutor {
    ~ event_bus: impl EventBusHandle
    + receive_event(e: Event)
    - send_webhook_data(url: String, e: Event)
}

WebhookExecutor -.-> WebhookRepo
WebhookExecutor -o EventBusHandle
@enduml